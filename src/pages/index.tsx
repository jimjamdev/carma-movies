import { useEffect, useState, useCallback } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';

import { Container } from '~components/atoms/container';
import { Grid } from '~components/atoms/grid';
import { FilterNav } from '~components/organisms/filter-nav';
import { MovieBanner } from '~components/organisms/movie-banner';
import { MovieItem } from '~components/organisms/movie-item';
import { DefaultLayout } from '~layouts/default';

import { config } from '~config';

import { IMovieData } from '~types';

import {
  getBanners,
  getMovies,
  moviesSelector,
  useAppDispatch,
  useAppSelector,
  wrapper,
} from '~store';

type IHomePage = {
  moviesSSR: IMovieData;
  bannersSSR: IMovieData;
};

const Home: NextPage<IHomePage> = ({ moviesSSR, bannersSSR }) => {
  const [page, setPage] = useState(1);
  const [sort, setSort] = useState('popularity');
  const [sortDirection, setSortDirection] = useState('desc');

  /*
   Dispatch our redux functions or select redux data
   */
  const dispatch = useAppDispatch();
  const { data, loading, error } = useAppSelector(moviesSelector);

  /*
  Set our data to redux state or fallback to SSR data
  */
  const movies = data?.results || moviesSSR?.results;
  const banners = bannersSSR?.results;

  /*
   Fetch our movies
   */
  const fetchMovies = useCallback(() => {
    const fetchUrl = async () => {
      await dispatch(
        getMovies({
          params: {
            page,
            sort_by: sort + '.' + sortDirection,
          },
        }),
      );
    };
    fetchUrl();
  }, [dispatch, page, sort, sortDirection]);

  /*
   Toggle the sort direction and set the local state
   */
  const toggleDirection = () => {
    if (sortDirection === 'desc') {
      return setSortDirection('asc');
    } else {
      return setSortDirection('desc');
    }
  };

  /*
   Set the page
   */
  const handleSetPage = (num: number) => {
    return setPage(num);
  };

  /*
   Re-fetch data if we update any of our state params
   */
  useEffect(() => {
    return fetchMovies();
  }, [fetchMovies]);

  const renderContent = () => {
    return (
      <>
        <FilterNav
          categoryChange={(item: any) => setSort(item?.value)}
          directionChange={(item: any) => setSortDirection(item?.value)}
        />
        <Container>
          {loading && <div style={{color: 'red', fontWeight: 'bold'}}>loading...</div>}
          {error && error}
          <Grid cols={2} tabletCols={4} desktopCols={4} margin="2rem 0">
            {movies &&
              movies.map((movie) => {
                return (
                  <MovieItem
                    key={movie.id}
                    title={movie?.title}
                    rating={movie?.vote_count}
                    date={movie?.release_date}
                    href={`/movie/${movie.id}`}
                    imageUrl={`${config.imagePath}/w500${movie.poster_path}`}
                  />
                );
              })}
          </Grid>
        </Container>
      </>
    );
  };

  return (
    <>
      <Head>
        <title>Carma Movie DB</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <DefaultLayout
        banner={<MovieBanner speed={6000} data={banners} />}
        content={renderContent()}
      />
    </>
  );
};

export const getServerSideProps = wrapper.getServerSideProps(
  (store) => async () => {
    /* We want the fetch on the server for SEO and page load speed if required. */
    /* You can ignore this if it's a backend app behind a login and instead, delete this, then */
    /*
  useEffect(() => {
    fetchMovies();
  }, [fetchMovies]);
  */
    const movies = await store.dispatch(
      getMovies({ params: { page: 1, sort_by: 'popularity.desc' } }),
    );
    // We only call banners once, maybe as well have it on SSR
    const banners = await store.dispatch(getBanners({}));
    return {
      props: {
        moviesSSR: movies?.payload,
        bannersSSR: banners?.payload,
      },
    };
  },
);

export default Home;
